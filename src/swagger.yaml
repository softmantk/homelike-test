openapi: 3.0.0
info:
  title: Home Like
  description: API documentation for HomeLike API
  version: 0.0.1
servers:
  - url: /
    description: self
  - url: http://localhost:3010
    description: local
paths:
  /:
    get:
      description: Welcome 
      responses:
        '200':
          description: success response
          content:
            text/plain:
              schema:
                type: string
                example: Welcome
  /ping:
    get:
      description: Check server connectivity
      summary: ping pong
      responses:
          '200':
            description: OK
            content:
              text/plain:
                schema:
                  type: string
                  example: pong
  /auth/signup:
    post:
      summary: Signup api for assessor
      description: Assessor sign up api
      tags:
       - User
      requestBody:
        $ref: '#/components/requestBodies/SignUpRequest'
      responses:
          '200':
            $ref: '#/components/responses/SignUpResponse'
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '406':
            $ref: '#/components/responses/InvalidRequest'
  /auth/signin:
    post:
      description: User sign In
      summary: User sign In
      tags:
       - User
      requestBody:
        $ref: '#/components/requestBodies/SignInRequest'
      responses:
          '200':
            $ref: '#/components/responses/SignUpResponse'
          '404':
            $ref: '#/components/responses/NotFound'
          '406':
            $ref: '#/components/responses/InvalidRequest'
  /api/v1/apartment:
    post:
      summary: create appartment
      description: create appartment
      tags: 
        - Apartment
      requestBody:
        $ref: '#/components/requestBodies/CreateApartment'
      responses:
        '200':
          description: Success
          content:
            appliaction/json:
              schema:
                $ref: '#/components/schemas/Apartment'
        '401':
            $ref: '#/components/responses/UnauthorizedError'
        '406':
            $ref: '#/components/responses/InvalidRequest'
      security:
        - bearerAuth: []
    get:
      summary: search apartments
      # desciption: search aparmtments by city, state, location
      tags:
        - Apartment
      parameters:
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/city'
        - $ref: '#/components/parameters/state'
        - $ref: '#/components/parameters/country'
        - $ref: '#/components/parameters/rooms'
        - $ref: '#/components/parameters/lat'
        - $ref: '#/components/parameters/long'
        - $ref: '#/components/parameters/maxDistance'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Apartment list
          content:
            appliaction/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/Apartment'
      security:
        - bearerAuth: []
      
  /api/v1/apartment/{id}:  
    get:
      summary: get apartment by id
      description: get apartment by id
      tags:
        - Apartment
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
            description: Success
            content:
              appliaction/json:
                schema:
                  $ref: '#/components/schemas/Apartment'
        '401':
            $ref: '#/components/responses/UnauthorizedError'
        '406':
            $ref: '#/components/responses/InvalidRequest'
      security:
        - bearerAuth: []
  /api/v1/favourite:
    post:
      summary: create new favourite
      description: create new user favourite
      tags:
        - Favourite
      requestBody:
        $ref: '#/components/requestBodies/CreateFavourite'
      responses:
        '200':
            description: Success
            content:
              appliaction/json:
                  schema:
                    $ref: '#/components/schemas/Favourite'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '406':
          $ref: '#/components/responses/InvalidRequest'
      security:
        - bearerAuth: []
    get: 
      summary: get favourites 
      description: get user favourites of the user
      tags:
        - Favourite
      responses:
        '200':
            description: Success
            content:
              appliaction/json:
                  schema:
                    type: array
                    items:
                      $ref: '#/components/schemas/Favourite'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '406':
          $ref: '#/components/responses/InvalidRequest'
      security:
        - bearerAuth: []
  /api/v1/favourite/{id}: 
    parameters:
      - $ref: '#/components/parameters/id'
    delete:
      summary: delete favourite
      description: delete fovourite by id
      tags:
        - Favourite
      responses:
        '200':
            description: Delete success
            content:
              appliaction/json:
                  schema:
                    type: object
                    properties:
                      message:
                        type: string
                        example: deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '406':
          $ref: '#/components/responses/InvalidRequest'
      security:
        - bearerAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    lat:
      name: lat
      in: query
      description: latitude of the user
      schema:
        type: number
        example: 1.233
    long:
      name: long
      description: longitude of the user
      in: query
      schema:
        type: number
        example: 13.233
    maxDistance:
      name: maxDistance
      description: distance boundary in Meter
      in: query
      schema:
        type: number
        example: 1000
    searchQuery:
      name: searchQuery
      in: query
      schema:
        type: string
        example: uae
    country:
      name: country
      in: query
      schema:
        type: string
        example: DE
    rooms:
      name: rooms
      in: query
      schema:
        type: number
        example: 1
    state:
      name: state
      in: query
      schema:
        type: string
        example: HE
    city:
      name: city
      in: query
      schema:
        type: string
        example: FrankFurt
    id:
      name: id
      description: id
      in: path
      required: true
      schema:
         $ref: '#/components/schemas/ObjectId'
    IdentityId:
      name: identityId
      description: Id of the identity
      in: path
      required: true
      example: 5ef052ae2a952a535d3a695f
      schema:
        type: string
    EmailToken:
      in: query
      name: code
      description: Token for verifying email address
      schema:
        type: string
    name: 
      in: query
      name: name
      description: name of the user
      schema:
        type: string
    page:
      in: query
      name: page
      description: 'page no. of the list'
      schema:
        type: string
    limit:
      in: query
      name: limit
      description: 'items per page'
      schema:
        type: string
  schemas:
    Apartment:
      title: Apartment
      type: object
      properties:
        title:
          type: string
          example: Cosy Apartments with kitchen - stylish & comfortable wit
        description:
          type: string
          example: We would like to welcome you to Frankfurt West, a central and beautiful district that is currently undergoing a very exciting development. 150 apartments from 20 to 40 sqm are waiting for you. Some of them with balcony or terrace
        user:
          $ref: '#/components/schemas/ObjectId'
        totalRooms:
          type: number
          example: 2
        apartmentType:
          type: string
          example: guest
        code:
          type: string
          example: DE-12345
        amenities:
          type: object
          properties:
            tv: 
              type: boolean
            heating:
              type: boolean
            towelAndSheets:
              type: boolean
            washingMachine:
              type: boolean
            workDesk:
              type: boolean
        location:
          type: object
          properties:
            streetAddress:
              type: string
              example: Solmsstra√üe , 60486 ,Frankfurt am Main, Deutschland
            city:
              type: string
              example: Frankfurt am Main
            state:
              type: string
              example: HE
            country:
              type: string
              example: DE
            loc:
              type: object
              properties:
                coordinates:
                  type: array
                  items:
                    type: number
                    example: [1.2222,2.3333]
    UserObject:
      title: User object
      type: object
      properties:
        id:
          type: string
          example: "12345678345678"
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          example: test@mail.com
        role:
          description: 'role id'
          oneOf:
            - type: string
            - type: object
        account:
          type: object
          properties:
            status:
              type: string
              example: active
            verification:
              type: object
              properties:
                verified:
                  type: boolean
                  example: false
                expiry:
                  type: string
                  format: date
                  example: '2020-07-29T05:41:45.829Z'
                code:
                  type: string
                  example: '3cf842c717c15b4c177b266fd21a5b43a3574f741308b543eaa92a2d5b2454a64feb83a2e02467557ffdfb7111ced6ca3a0f100e087d7b8a141a6f1f0fd40be47a736ef9d1e68c8d'
    IdentityId:
      type: string
      example: "5ed391b30eff84d75ea24c9f"
    DateISO:
      type: string
      example: "2020-06-19T11:52:59.985Z"
    UUID:
      type: string
      format: uuid
    ObjectId:
      description: Mongoose object id
      example: 5ef052ae6a952a535d3a695f
      type: string
      pattern: ^[a-f\d]{24}$
    Favourite:
      description: Favourite schema
      type: object
      properties:
        user: 
          $ref: '#/components/schemas/ObjectId'
        id:
          $ref: '#/components/schemas/UUID'
        createdAt:
          $ref: '#/components/schemas/DateISO'
        updatedAt:
          $ref: '#/components/schemas/DateISO'
  responses:
    UnauthorizedError:
      description: Unauthorised error
      content:
        application/json:
          schema: 
            type: object
            properties:
              statusCode:
                type: integer
                example: 401
              code:
                type: string
                example: UnauthorizedError
              message:
                type: string
                example: Unauthorized
    InvalidRequest:
      description: Invalid request
      content:
        application/json:
          schema: 
            type: object
            properties:
              code:
                type: string
                example: InvalidRequest
              message:
                type: string
                example: Invalid request
              title:
                type: string
                example: Invalid
    NotFound:
      description: Not found
      content:
        application/json:
          schema: 
            type: object
            properties:
              code:
                type: string
                example: NotFound
              message:
                type: string
                example: No records found
    SignUpResponse:
      description: Successful sign up response
      content:
        application/json:
          schema:
            type: object
            properties:
              token:
                type: string
                example: wedfchvgjbvd5drtcyvgjhbvtfy6drycvguhjk
              user:
                $ref: '#/components/schemas/UserObject'
    SignInResponse:
      description: Signin response
      content:
        application/json:
          schema:
            type: object
            properties:
              token:
                type: string
                example: wedfchvgjbvd5drtcyvgjhbvtfy6drycvguhjk
              user:
                $ref: '#/components/schemas/UserObject'
  requestBodies:
    SignInRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - email
              - password
            properties:
              email:
                type: string
                example: test@mail.com
              password:
                type: string
                example: 1234
    SignUpRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - firstName
              - lastName
              - email
              - password
            properties:
              firstName:
                type: string
                example: John
              lastName:
                type: string
                example: Doe
              email:
                type: string
                example: test@mail.com
              password:
                type: string
                example: 1234
    CreateFavourite:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              apartmentId:
                $ref: '#/components/schemas/ObjectId'
    CreateApartment:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              title:
                type: string
                example: Cosy Apartments with kitchen - stylish & comfortable wit
              apartmentType:
                  example: studio
              description:
                type: string
                example: '150 apartments from 20 to 40 sqm are waiting for you. Some of them with balcony or terrace. The ‚ÄúSalone‚Äù, our community area, is at your disposal if you don‚Äôt want to work in the apartment or if you just feel like some company.'
              country:
                type: string
                example: DE
              state:
                type: string
                example: HE
              city:
                type: string
                example: 25222
              lat:
                type: number
                example: 50.11552000
              long:
                type: number
                example: 8.68417000
              
                